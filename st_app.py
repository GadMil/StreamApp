# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17ZRikSIXi7xCG7G_UB-S7px1DrAU8o4C
"""

# app.py
import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import ast

def show_price_chart(prices, days):
    if not prices or len(prices) < 2:
        st.write("No chart available.")
        return

    fig = go.Figure()
    fig.add_trace(go.Scatter(
        y=prices[-days:],
        x=list(range(len(prices[-days:]))),
        mode="lines",
        line=dict(width=2, color="green" if prices[-1] >= prices[0] else "red"),
        showlegend=False
    ))
    fig.update_layout(
        height=250,
        margin=dict(l=20, r=20, t=20, b=20),
        xaxis=dict(title="Days", showgrid=False),
        yaxis=dict(title="Price", showgrid=True),
        plot_bgcolor="white",
        paper_bgcolor="white"
    )
    st.plotly_chart(fig, use_container_width=True)



# Load your ranked stock data
stocks_df = pd.read_csv("Detailed Stocks.csv")

st.set_page_config(page_title="FinTweet Stock Picker", layout="wide")

st.title("üìà FinTweet-Based Stock Ranking UI")

# --- Sidebar Filters ---
st.sidebar.header("Filter Options")
min_mentions = st.sidebar.slider("Minimum Mentions", 1, 10, 2)
min_unique_mentions = st.sidebar.slider("Minimum Unique Mentions", 1, 10, 2)

stocks_df['MarketCap_M'] = stocks_df['MarketCap'] / 1e6

min_cap_m = int(stocks_df['MarketCap_M'].min(skipna=True))
max_cap_m = int(stocks_df['MarketCap_M'].max(skipna=True))

min_input = st.sidebar.number_input(
    "Min Market Cap (Million USD)",
    value=min_cap_m,
    min_value=0,
    step=10,
)
max_input = st.sidebar.number_input(
    "Max Market Cap (Million USD)",
    value=max_cap_m,
    min_value=min_input,
    step=10,
)

min_rev_growth_val = stocks_df['Revenue Growth YoY'].min(skipna=True) * 100
min_rev_growth = st.sidebar.number_input(
    "Minimum Revenue Growth YoY (%)",
    min_value=min_rev_growth_val,
    max_value=20000.0,
    value=min_rev_growth_val,
    step=5.0
)

min_margin_pct = stocks_df['Profit Margin'].min(skipna=True) * 100
max_margin_pct = stocks_df['Profit Margin'].max(skipna=True) * 100

min_margin = st.sidebar.number_input(
    "Minimum Profit Margin (%)",
    min_value=min_margin_pct,
    max_value=max_margin_pct,
    value=min_margin_pct,
    step=5.0
)

sector_options = st.sidebar.multiselect("Sectors", stocks_df['Sector'].dropna().unique())

# Filter data
filtered = stocks_df[
    (stocks_df['Mentions'] >= min_mentions) &
    (stocks_df['Unique Mentions'] >= min_unique_mentions) &
    (stocks_df['MarketCap_M'].between(min_input, max_input)) &
    (stocks_df["Revenue Growth YoY"] >= min_rev_growth/100) &
    (stocks_df["Profit Margin"] >= min_margin/100)
]

if sector_options:
    filtered = filtered[filtered['Sector'].isin(sector_options)]

# --- Main View ---
st.subheader("Top Stocks (Filtered)")
sorted_df = filtered.copy()
sorted_df["Discount"] = sorted_df["discount"] * 100

st.dataframe(
    sorted_df[
        ['Symbol', 'Mentions', 'Unique Mentions', 'Sector', 'MarketCap_M', 'Target Price Change %', 'Discount']
    ].reset_index(drop=True),
    use_container_width=True,
    column_config={
        "MarketCap_M": st.column_config.NumberColumn(
            "Market Cap (Million USD)", format="%d"
        ),
        "Target Price Change %": st.column_config.NumberColumn("TP Change %", format="%.1f%%"),
        "Discount": st.column_config.NumberColumn(format="%.1f%%")
    }
)

# Detail panel
selected_stock = st.selectbox("Select a stock for details", filtered['Symbol'].unique())
if selected_stock:
    row = filtered[filtered['Symbol'] == selected_stock].iloc[0]

    st.markdown("#### üîó External Links")
    st.markdown(
        f"[üìä Yahoo Finance Analysis for {selected_stock}](https://finance.yahoo.com/quote/{selected_stock.split('$')[1]}/analyst-insights)",
        unsafe_allow_html=True)

    st.markdown(f"### Details for {selected_stock}")
    st.write(f"**Sector:** {row['Sector']}")
    st.write(f"**Mentions:** {row['Mentions']} (Unique: {row['Unique Mentions']})")
    st.write(f"**% Change Since 1st Mention:** {row['%Change']:.2f}%")
    st.write(f"**Market Cap:** ${row['MarketCap']:.2e}")
    st.write(f"**SP Entrance Potential:** {row['SP_Potential']}/5")
    st.write(f"**% Analysts Price Target Change (Week-Week)):** {row['Target Price Change %']:.2f}%")

    # --- Growth & Fundamentals ---
    st.markdown("#### üìä Growth & Fundamentals")
    fundamentals = [
        ("PE Ratio", row.get("PE Ratio")),
        ("Forward PE", row.get("Forward PE")),
        ("EPS TTM", row.get("EPS TTM")),
        ("ROE", row.get("ROE")),
        ("ROA", row.get("ROA")),
        ("Revenue Growth YoY", row.get("Revenue Growth YoY")),
        ("Profit Margin", row.get("Profit Margin")),
        ("Debt to Equity", row.get("Debt to Equity"))
    ]

    for name, val in fundamentals:
        if pd.notnull(val):
            if isinstance(val, float):
                if "Growth" in name or "Margin" in name or name in ["ROE", "ROA"]:
                    st.write(f"**{name}:** {val:.2%}")
                else:
                    st.write(f"**{name}:** {val:.2f}")
            else:
                st.write(f"**{name}:** {val}")

    # --- Intrinsic Value Estimates ---
    st.markdown("#### üí∞ Intrinsic Valuation")

    if pd.notnull(row.get("intrinsic_value")):
        st.write(f"**Intrinsic Value:** ${row['intrinsic_value']:.2f}")
        st.write(f"**Earnings-Based Valuation:** ${row.get('earnings_based_valuation'):.2f}" if pd.notnull(
            row.get('earnings_based_valuation')) else "Earnings-based: N/A")
        st.write(f"**Target Price √ó Analyst Multiplier:** ${row.get('target_mean_price_adjusted'):.2f}" if pd.notnull(
            row.get('target_mean_price_adjusted')) else "Target √ó Analyst: N/A")
        st.write(f"**Discount from Current Price:** {row['discount']:.1%}")
    else:
        st.write("Intrinsic valuation data not available.")

    # --- Technical Indicators ---
    st.markdown("#### üìâ Technical Indicators")

    def format_indicator(name, value):
        if pd.isnull(value):
            return f"{name}: ‚ùì N/A"

        if name == "RSI":
            if value < 30:
                return f"**RSI:** üü¢ {value:.1f} (Oversold)"
            elif value > 70:
                return f"**RSI:** üî¥ {value:.1f} (Overbought)"
            else:
                return f"**RSI:** ‚ö™ {value:.1f} (Neutral)"

        elif name == "MACD Diff":
            arrow = "üü¢" if value > 0 else "üî¥"
            return f"**MACD Diff:** {arrow} {value:.2f}"

        elif name == "% Off 52w High":
            return f"**% Off 52w High:** {value:.1%}"

        else:
            return f"**{name}:** {value:.2f}"

    technical_metrics = {
        "RSI": row.get("RSI"),
        "MACD Diff": row.get("MACD Diff"),
        "50d MA": row.get("50d MA"),
        "200d MA": row.get("200d MA"),
        "% Off 52w High": row.get("% Off 52w High")
    }

    for k, v in technical_metrics.items():
        st.markdown(format_indicator(k, v))

    # Optional: MA Crossover signal
    ma50 = row.get("50d MA")
    ma200 = row.get("200d MA")
    if pd.notnull(ma50) and pd.notnull(ma200):
        if ma50 > ma200:
            st.success("üìà Bullish crossover: 50d MA is above 200d MA")
        elif ma50 < ma200:
            st.warning("üìâ Bearish crossover: 50d MA is below 200d MA")

    # st.markdown("#### üß† Ryshab Score")
    #
    # score = row.get("Ryshab Score")
    # if pd.notnull(score):
    #     if score >= 5:
    #         st.success(f"Ryshab Score: {score}/6 üî• High Quality")
    #     elif score >= 3:
    #         st.info(f"Ryshab Score: {score}/6 ‚úÖ Solid Fundamentals")
    #     else:
    #         st.warning(f"Ryshab Score: {score}/6 ‚ö†Ô∏è Needs Caution")
    # else:
    #     st.write("Ryshab Score: Not Available")

    st.markdown("#### üè¢ Company Description")

    desc = row.get("Description")
    if pd.notnull(desc):
        st.write(desc)
    else:
        st.write("No description available.")

    st.markdown("#### üïí Price Chart Settings")
    time_range = st.selectbox("Select time range", ["2 months", "6 months", "1 year"])
    days = {"2 months": 60, "6 months": 180, "1 year": 365}[time_range]

    # Filter price history
    price_history = row.get("Price History", [])
    if isinstance(price_history, str):
        import ast

        price_history = ast.literal_eval(price_history)

    # Only keep the last N days
    if isinstance(price_history, list) and len(price_history) > days:
        price_history = price_history[-days:]

    st.markdown("#### üìà Price Chart")
    raw_prices = row.get("Price History")
    if isinstance(raw_prices, str):
        try:
            prices = ast.literal_eval(raw_prices)
        except:
            prices = []
    else:
        prices = raw_prices

    show_price_chart(prices, days)

